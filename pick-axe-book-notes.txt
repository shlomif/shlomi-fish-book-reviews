One calls methods on classes/objects using .:

song1 = Song.new("Ruby Tuesday")
song2 = Song.new("Enveloped in Python")

-----------------------------------------

One can call methods on constants:

    "gin joint".length

    -1942.abs

-----------------------------------------

One doesn't need ";" at the end of statements if they're on different lines.

-----------------------------------------

Ruby comments start with "#" and extend till the end of the line. (like Perl,
shell, Python)

-----------------------------------------

Method definition:

def sayGoodnight(name)
  result = "Goodnight, " + name
  return result
end

-----------------------------------------

Parentheses are optional in function calls. The following lines are all
equivalent:

<<<<<<<<<<<<<
puts sayGoodnight "John-Boy"
puts sayGoodnight("John-Boy")
puts(sayGoodnight "John-Boy")
puts(sayGoodnight("John-Boy"))
>>>>>>>>>>>>>

-----------------------------------------

Expression interpolation is done with #{EXPR} inside double-quoted strings.

-----------------------------------------

<<<<<<<<<<<<<<<
Ruby uses a convention to help it distinguish the usage of a name: the first
characters of a name indicate how the name is used. Local variables, method
parameters, and method names should all start with a lowercase letter or with
an underscore. Global variables are prefixed with a dollar sign ($), while
instance variables begin with an ``at'' sign (@). Class variables start with
two ``at'' signs (@@). Finally, class names, module names, and constants should
start with an uppercase letter. Samples of different names are given in Table
2.1 on page 10.
>>>>>>>>>>>>>>

-----------------------------------------

Hashes map any object as keys.

-----------------------------------------

empty1 = []
empty2 = Array.new

-----------------------------------------

<<<<<<<<
a = %w{ ant bee cat dog elk }
>>>>>>>>

Array of words like qw(...) in Perl.

-----------------------------------------

Hash lookup is using square brackets.

-----------------------------------------

With Hash.new($DEFAULT) one can specify a default value. Here is 0
as the default:

<<<<<<<<<<<<
histogram = Hash.new(0)
histogram['key1'] 	» 	0
histogram['key1'] = histogram['key1'] + 1
histogram['key1'] 	» 	1
>>>>>>>>>>>>

-----------------------------------------

if count > 10
  puts "Try again"
elsif tries == 3
  puts "You lose"
else
  puts "Enter a number"
end
^^^

-----------------------------------------

Statement modifiers (like in Perl only can be chained):

puts "Danger, Will Robinson" if radiation > 3000

-----------------------------------------

=~ /Perl|Python/ ---> Pattern match.

<<<<<<<<<<
line.sub(/Perl/, 'Ruby')    # replace first 'Perl' with 'Ruby'
line.gsub(/Python/, 'Ruby') # replace every 'Python' with 'Ruby'
>>>>>>>>>>

-----------------------------------------

Block syntax:

{ puts "Hello" }       # this is a block


do                     #
  club.enroll(person)  # and so is this
  person.socialize     #
end                    #

-----------------------------------------

def callBlock
  yield
  yield
end


callBlock { puts "In the block" }

produces:

In the block
In the block

(yield invokes the block).

-----------------------------------------

You can provide parameters to the call to yield: these will be passed to the
block. Within the block, you list the names of the arguments to receive these
parameters between vertical bars (``|'').

-----------------------------------------

5.times {  print "*" }
3.upto(6) {|i|  print i }
('a'..'e').each {|char| print char }

-----------------------------------------

puts writes each of its arguments, adding a newline after each. print also writes its arguments, but with no newline.

-----------------------------------------

while gets           # assigns line to $_
  if /Ruby/          # matches against $_
    print            # prints $_
  end
end

====

ARGF.each { |line|  print line  if line =~ /Ruby/ }

-----------------------------------------

A final use of the versatile range is as an interval test: seeing if some value
falls within the interval represented by the range. This is done using ===, the
case equality operator.

(1..10)    === 5
(1..10)    === 15

-----------------------------------------

alias oldPlus + - creates a method alias.


-----------------------------------------

http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_classes.html :

Classes, Objects, and Variables
*

class Song
  def initialize(name, artist, duration)
    @name     = name
    @artist   = artist
    @duration = duration
  end
end

* initialize acts as the constructor

*
class Song
  def to_s
    "Song: #{@name}--#{@artist} (#{@duration})"
  end
end
aSong = Song.new("Bicylops", "Fleck", 260)
aSong.to_s 	» 	"Song: Bicylops--Fleck (260)"

Override the stringification method.

*

class KaraokeSong < Song
  def initialize(name, artist, duration, lyrics)
    super(name, artist, duration)
    @lyrics = lyrics
  end
end

*

Declare read-only accessors for attributes:

class Song
  attr_reader :name, :artist, :duration
end

*

Assign to .duration :

{{{{{{{{{{
class Song
  def duration=(newDuration)
    @duration = newDuration
  end
end
}}}}}}}}}}

-----------------------------------------

* Writer accessor
{{{{{{{{{{
class Song
  attr_writer :duration
end
aSong = Song.new("Bicylops", "Fleck", 260)
aSong.duration = 257
}}}}}}}}}}}

-----------------------------------------

Class variables (global to a class):

Start with @@:

{{{{{{{{
class Song
  @@plays = 0
  def initialize(name, artist, duration)
    @name     = name
    @artist   = artist
    @duration = duration
    @plays    = 0
  end
  def play
    @plays += 1
    @@plays += 1
    "This  song: #@plays plays. Total #@@plays plays."
  end
end
}}}}}}}}

-----------------------------------------

f you want to delete a file, you call the class method  File.delete  , passing
in the name.

File.delete("doomedFile")

Class methods are distinguished from instance methods by their definition.
Class methods are defined by placing the class name and a period in front of
the method name.

-----------------------------------------

{{{{{{{{{{
class Logger
  private_class_method :new
  @@logger = nil
  def Logger.create
    @@logger = new unless @@logger
    @@logger
  end
end
}}}}}}}}}

private_class_method hides .new

-----------------------------------------

{{{{{{{{{{{{{{
class MyClass


      def method1    # default is 'public'
        #...
      end


  protected          # subsequent methods will be 'protected'


      def method2    # will be 'protected'
        #...
      end


  private            # subsequent methods will be 'private'


      def method3    # will be 'private'
        #...
      end


  public             # subsequent methods will be 'public'


      def method4    # and this will be 'public'
        #...
      end
end
}}}}}}}}}}}}}}

{{{{{{{{{{{
class MyClass


  def method1
  end


  # ... and so on


  public    :method1, :method4
  protected :method2
  private   :method3
end
}}}}}}}}}}}

-----------------------------------------

.freeze freezes an object and no longre allows modifications.

-----------------------------------------

Reached here:

http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_containers.html

-----------------------------------------

array.length returns the length of the array.

-----------------------------------------

You can also index arrays with a pair of numbers, [start, count]. This returns
a new array consisting of references to count objects starting at position
start.

a = [ 1, 3, 5, 7, 9 ]
a[1, 3] 	» 	[3, 5, 7]

-----------------------------------------

Like first in Perl:

{{{{{{
return @songs.find { |aSong| aSong.name == key }
}}}}}}

-----------------------------------------

yield and a block example:

{{{{{
def fibUpTo(max)
  i1, i2 = 1, 1        # parallel assignment
  while i1 <= max
    yield i1
    i1, i2 = i2, i1+i2
  end
end

fibUpTo(1000) { |f| print f, " " }
}}}}}

-----------------------------------------

&action as a subroutine argument specifies a block/callback-ref:

class JukeboxButton < Button
  def initialize(label, &action)
    super(label)
    @action = action
  end
  def buttonPressed
    @action.call(self)
  end
end


bStart = JukeboxButton.new("Start") { songList.start }
bPause = JukeboxButton.new("Pause") { songList.pause }

-----------------------------------------

Reached here:

http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_stdtypes.html

-----------------------------------------

num.type ==> The type of the number.

-----------------------------------------

You can also get the integer value corresponding to an ASCII character or
escape sequence by preceding it with a question mark. Control and meta
combinations can also be generated using ?\C-x, ?\M-x, and ?\M-\C-x. The
control version of a value is the same as ``value & 0x9f''. The meta version of
a value is ``value | 0x80''. Finally, the sequence ?\C-? generates an ASCII
delete, 0177.

?a                        # character code
?\n                       # code for a newline (0x0a)
?\C-a                     # control a = ?A & 0x9f = 0x01
?\M-a                     # meta sets bit 7
?\M-\C-a                  # meta and control a
?\C-?                     # delete character

-----------------------------------------

3.times        { print "X " }
1.upto(5)      { |i| print i, " " }
99.downto(95)  { |i| print i, " " }
50.step(80, 5) { |i| print i, " " }

-----------------------------------------

To fix this, use the  String#to_i   method to convert the string to
an integer.

-----------------------------------------

%q/general single-quoted string/   	»  	 general single-quoted string
%Q!general double-quoted string! 	» 	general double-quoted string
%Q{Seconds/day: #{24*60*60}} 	» 	Seconds/day: 86400

-----------------------------------------

A here document consists of lines in the source up to, but not including, the
terminating string that you specify after the << characters. Normally, this
terminator must start in the first column. However, if you put a minus sign
after the << characters, you can indent the terminator.

-----------------------------------------

songs = SongList.new


songFile.each do |line|
  file, length, name, title = line.chomp.split(/\s*\|\s*/)
  songs.append Song.new(title, name, length)
end
puts songs[1]

-----------------------------------------

name.squeeze!(" ") - squeezes sequences of " "'s into one " ".

-----------------------------------------

Instead, we'll use a related method.  String#scan   is similar to split in that
it breaks a string into chunks based on a pattern. However, unlike split, with
scan you specify the pattern that you want the chunks to match. In this case,
we want to match one or more digits for both the minutes and seconds component.
The pattern for one or more digits is /\d+/.

-----------------------------------------

Reached "Ranges" here:

http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_stdtypes.html

-----------------------------------------

.to_a convert to a list.

(1..10).to_a   	»  	 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

-----------------------------------------

digits = 0..9
digits.include?(5) 	» 	true
digits.min 	» 	0
digits.max 	» 	9
digits.reject {|i| i < 5 } 	» 	[5, 6, 7, 8, 9]
digits.each do |digit|
  dial(digit)
end

-----------------------------------------

Ranges can be implemented on other objects as long as they implement
the "succ" by returning the next object and "<=>" for comparison.

-----------------------------------------

while gets
  print if /start/../end/
end

-----------------------------------------

A final use of the versatile range is as an interval test: seeing if some value
falls within the interval represented by the range. This is done using ===, the
case equality operator.

(1..10)    === 5 	» 	true
(1..10)    === 15 	» 	false
(1..10)    === 3.14159 	» 	true
('a'..'j') === 'c' 	» 	true
('a'..'j') === 'z' 	» 	false

-----------------------------------------

Regular expressions are objects of type Regexp. They can be created by calling
the constructor explicitly or by using the literal forms /pattern/ and
%r\pattern\.

a = Regexp.new('^\s*[a-z]') 	» 	/^\s*[a-z]/
b = /^\s*[a-z]/ 	» 	/^\s*[a-z]/
c = %r{^\s*[a-z]} 	» 	/^\s*[a-z]/

-----------------------------------------

The =~ returns the position of the match.

a = "Fats Waller"
a =~ /a/ 	» 	1
a =~ /z/ 	» 	nil
a =~ "ll" 	» 	7

-----------------------------------------

The match operators set $& to match ; $` to before and $' to after. (like
in Perl).

-----------------------------------------

a = "the quick brown fox"
a.sub(/[aeiou]/,  '*') 	» 	"th* quick brown fox"
a.gsub(/[aeiou]/, '*') 	» 	"th* q**ck br*wn f*x"
a.sub(/\s\S+/,  '') 	» 	"the brown fox"
a.gsub(/\s\S+/, '') 	» 	"the"

-----------------------------------------

a = "the quick brown fox"
a.sub(/^./) { $&.upcase } 	» 	"The quick brown fox"
a.gsub(/[aeiou]/) { $&.upcase } 	» 	"thE qUIck brOwn fOx"

-----------------------------------------

"fred:smith".sub(/(\w+):(\w+)/, '\2, \1')   	»  	 "smith, fred"
"nercpyitno".gsub(/(.)(.)/, '\2\1') 	» 	"encryption"

-----------------------------------------

re = /(\d+):(\d+)/     # match a time hh:mm
md = re.match("Time: 12:34am")
md.type 	» 	MatchData
md[0]         # == $& 	» 	"12:34"
md[1]         # == $1 	» 	"12"
md[2]         # == $2 	» 	"34"
md.pre_match  # == $` 	» 	"Time: "
md.post_match # == $' 	» 	"am"

-----------------------------------------

Reached http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_methods.html

-----------------------------------------

`?'' and ``!'' are the only weird characters allowed as method name suffixes.

-----------------------------------------

default values:

def coolDude(arg1="Miles", arg2="Coltrane", arg3="Roach")
  "#{arg1}, #{arg2}, #{arg3}."
end

-----------------------------------------

def varargs(arg1, *rest)
  "Got #{arg1} and #{rest.join(', ')}"
end

varargs("one") 	» 	"Got one and "
varargs("one", "two") 	» 	"Got one and two"
varargs "one", "two", "three" 	» 	"Got one and two, three"

-----------------------------------------

However, if the last parameter in a method definition is prefixed with an
ampersand, any associated block is converted to a Proc object, and that object
is assigned to the parameter.

{{{{{{{
def initialize(name, &block)
    @name, @block = name, block
end
}}}}}}}

-----------------------------------------

# Expanding arrays in method calls:

{{{{{{{
def five(a, b, c, d, e)
  "I was passed #{a} #{b} #{c} #{d} #{e}"
end

five(1, 2, 3, 4, 5 ) 	» 	"I was passed 1 2 3 4 5"
five(1, 2, 3, *['a', 'b']) 	» 	"I was passed 1 2 3 a b"
five(*(10..14).to_a) 	» 	"I was passed 10 11 12 13 14"
}}}}}}}

-----------------------------------------

proc {... } to construct a procedure, & to pass it as a reference.

{{{{{{{
print "(t)imes or (p)lus: "
times = gets
print "number: "
number = gets.to_i


if times =~ /^t/
  calc = proc { |n| n*number }
else
  calc = proc { |n| n+number }
end
puts((1..10).collect(&calc).join(", "))
}}}}}}}

-----------------------------------------

anArray << val - append to an array.

-----------------------------------------

Reached:

http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_expressions.html

-----------------------------------------

Operators are methods:

{{{{{{{{
(a.*(b)).+(c)
}}}}}}}}


-----------------------------------------

class Fixnum
  alias oldPlus +
  def +(other)
    oldPlus(other).succ
  end
end

1 + 2 	» 	4
a = 3
a += 4 	» 	8

-----------------------------------------

`...` or %x{ ... } executed a command.

-----------------------------------------

Behaviour of * in Ruby:

{{{{{{{
a = [1, 2, 3, 4]
b,  c = a 	» 	b == 1, 	c == 2
b, *c = a 	» 	b == 1, 	c == [2, 3, 4]
b,  c = 99,  a 	» 	b == 99, 	c == [1, 2, 3, 4]
b, *c = 99,  a 	» 	b == 99, 	c == [[1, 2, 3, 4]]
b,  c = 99, *a 	» 	b == 99, 	c == 1
b, *c = 99, *a 	» 	b == 99, 	c == [1, 2, 3, 4]
}}}}}}}


-----------------------------------------

{{{{{{
b, (c, d), e = 1,2,3,4  	 »  	b == 1,  	c == 2,  	d == nil,  	e == 3
b, (c, d), e = [1,2,3,4] 	» 	b == 1, 	c == 2, 	d == nil, 	e == 3
b, (c, d), e = 1,[2,3],4 	» 	b == 1, 	c == 2, 	d == 3, 	e == 4
b, (c, d), e = 1,[2,3,4],5 	» 	b == 1, 	c == 2, 	d == 3, 	e == 5
b, (c,*d), e = 1,[2,3,4],5 	» 	b == 1, 	c == 2, 	d == [3, 4], 	e == 5
}}}}}}


-----------------------------------------

0.step(12, 3) {|x| print x, " " }

produces:

0 3 6 9 12

-----------------------------------------

<<<
loop {
  # block ...
}
>>>

-----------------------------------------

{{{
for aSong in songList
  aSong.play
end
}}}

-----------------------------------------

Reached:

http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_exceptions.html

-----------------------------------------

When you need to raise an exception, you can use one of the built-in Exception
classes, or you can create one of your own. If you create your own, you might
want to make it a subclass of StandardError or one of its children. If you
don't, your exception won't be caught by default.

-----------------------------------------

Reached:

http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_modules.html

-----------------------------------------

{{{{{{{{
module Trig
  PI = 3.141592654
  def Trig.sin(x)
   # ..
  end
  def Trig.cos(x)
   # ..
  end
end
}}}}}}}}


-----------------------------------------

{{{
module Debug
  def whoAmI?
    "#{self.type.name} (\##{self.id}): #{self.to_s}"
  end
end
class Phonograph
  include Debug
  # ...
end
class EightTrack
  include Debug
  # ...
end
ph = Phonograph.new("West End Blues")
et = EightTrack.new("Surrealistic Pillow")
ph.whoAmI? 	» 	"Phonograph (#537766170): West End Blues"
et.whoAmI? 	» 	"EightTrack (#537765860): Surrealistic Pillow"
}}}

-----------------------------------------

The load method includes the named Ruby source file every time the method is
executed, whereas require loads any given file only once. require has
additional functionality: it can load shared binary libraries. Both routines
accept relative and absolute paths. If given a relative path (or just a plain
name), they'll search every directory in the current load path ($:, discussed
on page 140) for the file.
